local M = {}

local notify = require("lua.virtual-modes.utils.notify").notify

-- Print functions
-- local function should_be_type(t, key, value)
-- 	notify("Field '" .. key .. "' must be a " .. t .. ".\nGot a: " .. type(value) .. ".", "warn")
-- end
--
-- local function should_be_string(key, value)
-- 	should_be_type("string", key, value)
-- end
--
-- local function should_be_name(key, value)
-- 	if not is_string(value) then
-- 		should_be_string(key, value)
-- 	elseif value == normal_mode then
-- 		notify("Mode cannot be named '" .. normal_mode .. "'.", "warn")
-- 	end
-- end
--
-- local function should_be_bool(key, value)
-- 	should_be_type("boolean", key, value)
-- end
--
-- local function should_be_executable(key, value)
-- 	notify(
-- 		"Field '"
-- 			.. key
-- 			.. "' must be a string, a lua function or table containing strings and/or lua functions.\nGot a: "
-- 			.. type(value)
-- 			.. ".",
-- 		"warn"
-- 	)
-- 	notify(key .. ":\n" .. vim.inspect(value), "debug")
-- end
--
-- local function should_be_keymaps(key, value)
-- 	notify(
-- 		"Field '"
-- 			.. key
-- 			.. "' a valid table of keymap configurations. Got:\n"
-- 			.. vim.inspect(value)
-- 			.. "",
-- 		"warn"
-- 	)
-- end
--
-- local print_warning = {
-- 	name = should_be_name,
-- 	keymap_enter = should_be_string,
-- 	keymap_enter_prefix = should_be_string,
-- 	enable_keymap_prefix = should_be_bool,
-- 	on_enter = should_be_executable,
-- 	on_exit = should_be_executable,
-- 	modes = nil, -- cannot be set yet since the defining function uses the is_valid table
-- 	keymaps = should_be_keymaps,
-- }
--
-- function M.print_mode_config_warning(name, mode_config)
-- 	if type(mode_config) ~= "table" then
-- 		notify(name .. "mode config should be a table", "warn")
-- 	else
-- 		for key, value in pairs(mode_config) do
-- 			if type(is_valid[key]) == "function" and not is_valid[key](value) then
-- 				print_warning[key](key, value)
-- 			else
-- 				notify("Unknown field: " .. key .. ".", "warn")
-- 			end
-- 		end
-- 	end
-- end
--
-- print_warning.modes = M.print_mode_config_warning
--
-- function M.print_config_warning(config)
-- 	notify("Config:\n" .. vim.inspect(config), "debug")
-- 	if type(config) ~= "table" then
-- 		notify("Global config should be a table", "warn")
-- 	else
-- 		for key, value in pairs(config) do
-- 			if type(is_valid[key]) == nil then
-- 				notify("Unknown field: " .. key .. ".", "warn")
-- 			elseif not is_valid[key](value) then
-- 				print_warning[key](key, value)
-- 			end
-- 		end
-- 	end
-- end

return M
